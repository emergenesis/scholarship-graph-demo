// Generated by CoffeeScript 1.3.3
var $, graphDemo, graphSettings, graph_data, graph_metadata;

$ = jQuery;

graphSettings = {
  vertex_min_radius: 5,
  vertex_max_radius: 20,
  height: 500
};

graph_metadata = function($el, data) {
  if (data != null) {
    return $el.data("graphMetadata", data);
  } else {
    return $el.data("graphMetadata");
  }
};

graph_data = function($el, data) {
  if (data != null) {
    return $el.data("graphData", data);
  } else {
    return $el.data("graphData");
  }
};

graphDemo = {
  init: function(options) {
    $.extend(graphSettings, options);
    return this.each(function() {
      var $chart, metadata;
      $chart = $(this);
      metadata = graph_metadata($chart);
      if (!(metadata != null)) {
        console.log("Initializing on element", this);
        graph_metadata($chart, {
          graph_width: $chart.parent().width() - 2,
          graph_height: graphSettings.height
        });
        return $("a.initiate", $chart).click(function() {
          return $chart.graphDemo("run");
        });
      }
    });
  },
  run: function() {
    return this.each(function() {
      var $chart, metadata, vis;
      $chart = $(this);
      metadata = graph_metadata($chart);
      if (metadata.running) {
        $.error("The graph demo is already running!");
        return;
      } else {
        graph_metadata($chart, {
          running: true
        });
      }
      console.log("Running the plugin on element", this);
      $("a.initiate", $chart).remove();
      $chart.addClass("active");
      vis = d3.select(this).append("svg:svg").attr("width", metadata.graph_width).attr("height", metadata.graph_height);
      console.log("Fetching data for element ", this);
      return d3.json("demo_graph_data.json", function(json) {
        var e, edgeIndex, edges, graph, max_weight, v, vertices, _i, _j, _len, _len1, _ref, _ref1;
        edgeIndex = [];
        max_weight = 1;
        _ref = json.edges;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          e = _ref[_i];
          edgeIndex["" + e.source + "," + e.target] = 1;
          edgeIndex["" + e.target + "," + e.source] = 1;
        }
        graph = d3.layout.force().charge(-500).linkDistance(graphSettings.vertex_max_radius * 5).gravity(.1).size([metadata.graph_width, metadata.graph_height]).nodes(json.vertices).links(json.edges);
        graph.on("tick", function(v) {
          json.vertices[0].x = metadata.graph_width / 2;
          json.vertices[0].y = metadata.graph_height / 2;
          vertices.attr("transform", function(v) {
            var r, x, y;
            r = parseInt(d3.select(this.parentNode).select("circle").attr("r"));
            x = Math.max(r, Math.min(metadata.graph_width - r, v.x));
            y = Math.max(r, Math.min(metadata.graph_height - r, v.y));
            v.x = x;
            v.y = y;
            return "translate(" + x + "," + y + ")";
          });
          edges.attr("x1", function(e) {
            return e.source.x;
          });
          edges.attr("x2", function(e) {
            return e.target.x;
          });
          edges.attr("y1", function(e) {
            return e.source.y;
          });
          return edges.attr("y2", function(e) {
            return e.target.y;
          });
        });
        console.log(json);
        graph.start();
        _ref1 = json.vertices;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          v = _ref1[_j];
          if (v.weight > max_weight) {
            max_weight = v.weight;
          }
        }
        edges = vis.selectAll("line.link").data(json.edges).enter().append("svg:line").attr("class", "edge").attr("x1", function(e) {
          return e.source.x;
        }).attr("x2", function(e) {
          return e.target.x;
        }).attr("y1", function(e) {
          return e.source.y;
        }).attr("y2", function(e) {
          return e.target.y;
        }).attr("title", function(e) {
          return e.label;
        });
        vertices = vis.selectAll("g.node").data(json.vertices).enter().append("svg:g").attr("class", "vertex").call(graph.drag);
        vertices.append("svg:circle").attr("class", "vcircle").attr("r", function(v) {
          return v.weight / max_weight * (graphSettings.vertex_max_radius - graphSettings.vertex_min_radius) + graphSettings.vertex_min_radius;
        }).attr("title", function(v) {
          return v.label;
        });
        return vertices.append("svg:text").attr("class", "vlabel").attr("dx", function(v, i) {
          var n;
          n = parseFloat(d3.select(this.parentNode).select("circle").attr("r"));
          return n + 5.0;
        }).attr("dy", 5).text(function(v) {
          return v.label;
        });
      });
    });
  }
};

$.fn.graphDemo = function(method) {
  if (method in graphDemo) {
    return graphDemo[method].apply(this, Array.prototype.slice.call(arguments, 1));
  } else if (!(method != null) || typeof method === 'object') {
    return graphDemo.init.apply(this, arguments);
  } else {
    return $.error("Method " + method + " is undefined on jQuery.graphDemo.");
  }
};
